day-2 Descompilando Pods

Comando importante

kubectl get pods
kubectl get pods -A # informação de todos os pods
kubectl get pods -n kube-system # usamos o -n para especificar o name space
kubectl describe pods nomedopod #traz mas detalhes sobre o pods em execução
kubectl get pods nomedopod -o yaml # traz as informação em formato yaml dos pods
kubectl get pods -o wide #traz mais detalhes dos pods em execução
kubectl get pods -L run #traz os pods que tenham a label "run"
kubectl delete pods nomedopode # deletar o pods
kubectl rum nomedopod --image=ngnix --port=80
kubectl run -i -t image=buysbox # roda um pods da imagem do busybox aonde "-i" interatividade com o pod  e "-t" traz o terminal aonde posso interagir com o pod, assim o pod fica esperando alguma interação com ele, se subir a imagem do buysbox sem isso não funciona, tb nesse modo ao executar o comando vc não entra dentro do pods
kubectl run -i -t image=alpine # depois de acessar o pod instalamos o curl com o comando apk add curl
kubectl attach nomedopod -c nomedopod -ti
kubectl exec -it nomedopod --bash #executar algo no pod com -it de interação e --bash 
kubectl exec nomedopod -- cat /usr/share/ngnix/html/index.html #comando para trazer a informação do index.html do pods sem necessáriamente acessar o mesmo.
kubectl run nomedopod --image alpine --dry-run=client -0 yaml #fingi que cria um pod e traz a sua saída em yaml
kubectl run nomedopod --image alpine --dry-run=client -0 yaml > pod.yaml # passa as informação do yaml para um arquivo.yaml
kubectl apply -f nomedopod.yaml #crianção e atualização de pod usando yaml criando no passo anterior, -f quer fizer "file"
kubectl delete -f nomedopod.yaml (quando for atualização do yaml atual, pode usar o apply normal, mas se for necessário add mais um container dentro do pod será necessário remover o mesmo e criar novamente.
kubectl describe pods nomedopod #ira trazer informações sobre o pod se houver erro
kubectl logs nomedopod #traz o informações de logs
kubectl logs nomedopo -c nomedocontainer #traz informação de um container especifico dentro do pod

--------------------------------------------------
Criando pod com limitação de uso de memoria e cpu usando o yaml adicionando a seguintes informações
OBS: o mais importante antes de subir o pod é saber o consumo da mesma, para evitar problemas no cluster

resources: 
      limits: 
        memory: "128Mi" 
        cpu: "0.5" 
      requests: 
        memory: "64Mi" 
        cpu: "0.3" 

-------------------------------------------------------

(comandos dentro do pod)
cd /proc/1
cat cmdline
cd /proc (tds os processos)
free -m (ver memória)

Teste de stress para validar o limite de cpu e memória
apt update
apt install stress
stress --cpu 1 --vm 1
stress --vm-bytes 120M --vm 1
-------------------------------------------------------
Criando pods com volume usando yaml

kubectl apply -f nomedopodcomVolume.ymal

apiVersion: v1 
kind: Pod 
metadata: 
  labels:
    run: obivas4
  name: obivas4 
spec: 
  containers: 
  - image: ngnix
    name: webserver
    volumeMounts:
    - mountPath: /obi
      name: primeiro-volume
    resources:
      limits:
        cpu: "1"
        memory: "64Mi"
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volume:
  - name: primeiro-volume
    emptyDir:
      sizeLimit: 256Mi
Acessar o pode para validar o volume criado

kubectl exe -ti nomedopodcomvolume -- bash
listar as pastas dentro do container
ls e procurar pelo o nome criado, nesse exemplo "obi"
ou tb com o comando "mount" e procurar pelo volume

-----------------------------------------------------------------
     
    
    volumeMounts: 
    - name: primeiro-emptydir # nome do volume
      mountPath: /giropops # diretório onde o volume será montado 
  volumes: 
  - name: primeiro-emptydir # nome do volume
    emptyDir: # tipo do volume
      sizeLimit: 256Mi # tamanho máximo do volume


